scalar Datetime # Input/Output: "2022-07-28T06:30:00Z"
scalar Date # Input/Output: "2022-07-28"
scalar Time # Output: 6:30pm, 8:30am...
scalar Color # #FFFFFF
enum ScheduleMode {
  ARRIVE_BY
  DEPART_AT
}

type Location {
  latitude: Float!
  longitude: Float!
  distance(location: LocationInput!): Float!
}

type Path {
  distance: Float!
  path: [Location!]!
}

type Stop {
  id: ID!
  name: String!
  code: String!
  location: Location!
  routes: [StopRoute!]!
}

type Bus {
  headsign: String!
  arrival: Datetime!
  lastUpdated: Datetime!
  lastUpdatedMinutes: Int!
  lastUpdatedMessage: String!
  distance: Float
  location: Location
}

type StopRoute {
  stop: Stop!
  route: Route!
  direction: ID!
  headsign: String!
  schedule: Schedule! # schedule all stop times
  scheduleReaches(destination: ID!): Schedule # schedule to reach the destination
  reaches(forward: Boolean!): [Stop!]! # stops that this stop route reaches
  liveMap: String
  liveBuses: [Bus!]!
}

type Schedule {
  next(limit: Int!, after: Datetime): [ScheduleResult!]!
  on(date: Date!): [ScheduleResult!]!
}

type ScheduleResult {
  stoptime: StopTime!
  datetime: Datetime!
}

type Route {
  id: ID!
  name: String!
  text: Color!
  background: Color!
}

type Trip {
  id: ID!
  route: Route!
  stoptimes: [StopTime!]!
  shape: [Location!]!
  service: Service!
  direction: ID!
  headsign: String!
}

type StopTime {
  id: ID!
  stop: Stop!
  trip: Trip!
  time: Time!
  sequence: Int!
  overflow: Boolean!
}

type Service {
  sunday: Boolean!
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  start: Date!
  end: Date!
  exceptions: [ServiceException!]!
}

type ServiceException {
  added: Boolean!
  date: Date!
}

type TravelSchedulePayload {
  schedule: TravelSchedule
  error: String
}

type TravelSchedule {
  origin: TravelScheduleNode!
  destination: TravelScheduleNode!
  duration: Int! # minutes
  legs: [TravelScheduleLeg!]!
}

type TravelScheduleLeg {
  origin: TravelScheduleNode!
  destination: TravelScheduleNode!
  duration: Int! # minutes
  transit: Transit
  walk: Path
}

type TravelScheduleNode {
  location: Location!
  arrival: Datetime!
  stop: Stop
}

type Transit {
  route: Route!
  trip: Trip!
  departure: Datetime! # bus departure time
  duration: Int! # minutes, spent on the bus
  wait: Int! # minutes, spent on waiting for the bus
}

input TravelPlannerOptions {
  datetime: Datetime
  mode: ScheduleMode!
}

input TravelPlanInput {
  origin: LocationInput!
  destination: LocationInput!
  legs: [TravelPlanLegInput]!
}

input TravelPlanLegInput {
  originId: ID!
  destinationId: ID!
  routeId: ID!
}

input LocationInput {
  latitude: Float!
  longitude: Float!
}

type Query {
  # lookup by id
  stop(id: ID!): Stop
  stopRoute(stopId: ID!, routeId: ID!): StopRoute

  # search
  searchStopText(text: String!, page: PageInput!): StopSearchPayload!

  searchStopLocation(
    location: LocationInput!
    radius: Float!
    page: PageInput!
    sorted: Boolean!
  ): StopSearchPayload!

  # travel planner between two locations
  travelPlanner(
    origin: LocationInput!
    destination: LocationInput!
    options: TravelPlannerOptions!
  ): TravelSchedulePayload!

  # travel planner using a fixed route
  travelPlannerFixedRoute(
    input: TravelPlanInput!
    options: TravelPlannerOptions!
  ): TravelSchedulePayload!

  # travel planner using multiple fixed routes
  travelPlannerFixedRoutes(
    input: [TravelPlanInput!]!
    options: TravelPlannerOptions!
  ): [TravelSchedulePayload!]!
}

type PageInfo {
  cursor: Int! # how many to skip next time
  remaining: Int!
}

input PageInput {
  skip: Int!
  limit: Int! # use a negative number to disable the limit
}

type StopSearchPayload {
  page: PageInfo!
  results: [Stop!]!
}
