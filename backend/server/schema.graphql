scalar DateTime     # Input/Output: "2022-07-28T06:30:00Z"
scalar Date         # Input/Output: "2022-07-28"
scalar Time         # Output: 6:30pm, 8:30am...
scalar Color 

enum RouteType {
    BUS
    TRAIN
}

type Location {
    latitude: Float!
    longitude: Float!
    distance(location: LocationInput!): Float!
}

type Stop {
    id: ID!
    name: String!
    code: String!
    location: Location!
    routes: [StopRoute!]!
}

type StopRoute { 
    stop: Stop!
    route: Route!
    direction: ID!
    headsign: String!
    schedule: StopRouteSchedule!
}

type StopRouteSchedule {
    next(limit: Int!): [StopTime!]!
    on(date: Date!): [StopTime!]!
}

type Route {
    id: ID!
    name: String!
    text: Color!
    background: Color!
    type: RouteType!
}

type Trip {
    id: ID!
    route: Route!
    stopTimes: [StopTime!]!
    service: Service!
    direction: ID!
    headsign: String!
}

type StopTime {
    id: ID!
    trip: Trip!
    time: Time!
    sequence: Int!
}

type Service {
    sunday: Boolean!
    monday: Boolean!
    tuesday: Boolean!
    wednesday: Boolean!
    thursday: Boolean!
    friday: Boolean!
    saturday: Boolean!
    start: Date!
    end: Date!
    exceptions: [ServiceException!]!
}

type ServiceException {
    added: Boolean!
    date: Date!
}

type StopLocationResult {
    stop: Stop!
    distance: Float!
}

type TravelRoute {
    legs: [TravelRouteLeg!]!
}

# Travel route leg
type TravelRouteLeg {
    origin: Stop!
    destination: Stop!
    walk: Boolean!
    distance: Float!
    route: Route                # if null then walking
}

type TravelSchedule {
    legs: [TravelScheduleLeg!]!
    departure: DateTime!
    arrival: DateTime!
    duration: Int! 
}

# Travel schedule leg
type TravelScheduleLeg {
    origin: Stop!
    destination: Stop!
    walk: Boolean!
    distance: Float!
    transit: Transit            # if null then walking
    duration: Int!
    departure: DateTime!
    arrival: DateTime!
}

# Transit taken by a scheduled leg
type Transit {
    route: Route!
    trip: Trip!
}

input TravelSchedulePlannerInput {
    legs: [TravelLegInput!]!
    # if departure and arrival are null then the current time is used and it's a departure
    departure: DateTime
    arrival: DateTime
}

input TravelLegInput {
    origin: ID!
    destination: ID!
    # if the route id is null then walk
    route: ID
}

input TravelRoutePlannerInput {
    origin: ID!
    destination: ID!
    departure: DateTime # if null the departure time is now
}

type TravelRoutePayload {
    route: TravelRoute
    errors: [Error!]!
}

type TravelSchedulePayload {
    schedule: TravelSchedule
    errors: [Error!]!
}

type Error {
    field: String!
    message: String!
}

input LocationInput {
    latitude: Float!
    longitude: Float!
}

input PageInput {
    skip: Int!
    limit: Int!
}

type Query {
    # simple
    stop(id: ID!): Stop

    # search
    searchStopText(text: String!): [Stop!]! 
    searchStopLocation(location: LocationInput!, radius: Float!): [StopLocationResult!]! 
    
    # travel planner (route between two stops)
    travelRoutePlanner(input: TravelRoutePlannerInput!): TravelRoutePayload!

    # travel scheduler (arrive by / depart at)
    travelSchedulePlanner(input: TravelSchedulePlannerInput!): TravelSchedulePayload!
}