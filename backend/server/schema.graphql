scalar DateTime     # Input/Output: "2022-07-28T06:30:00Z"
scalar Date         # Input/Output: "2022-07-28"
scalar Time         # Output: 6:30pm, 8:30am...
scalar Color 

enum ScheduleMode {
    ARRIVE_BY
    DEPART_AT
}

enum RouteType {
    BUS
    TRAIN
}

type Location {
    latitude: Float!
    longitude: Float!
    distance(location: LocationInput!): Float!
}

type Stop {
    id: ID!
    name: String!
    code: String!
    location: Location!
    routes: [StopRoute!]!
}

type Bus {
    headsign: String!
    arrival: Time!
    lastUpdated: Time!
    location: Location
}

type StopRoute { 
    stop: Stop!
    route: Route!
    direction: ID!
    headsign: String!
    schedule: StopRouteSchedule!
    liveMap: String
    liveBuses: [Bus!]!
}

type StopRouteSchedule {
    next(limit: Int!, after: DateTime): [StopTime!]!
    on(date: Date!): [StopTime!]!
}

type Route {
    id: ID!
    name: String!
    text: Color!
    background: Color!
    type: RouteType!
}

type Trip {
    id: ID!
    route: Route!
    stopTimes: [StopTime!]!
    service: Service!
    direction: ID!
    headsign: String!
}

type StopTime {
    id: ID!
    stop: Stop!
    trip: Trip!
    time: Time!
    sequence: Int!
    overflow: Boolean!
}

type Service {
    sunday: Boolean!
    monday: Boolean!
    tuesday: Boolean!
    wednesday: Boolean!
    thursday: Boolean!
    friday: Boolean!
    saturday: Boolean!
    start: Date!
    end: Date!
    exceptions: [ServiceException!]!
}

type ServiceException {
    added: Boolean!
    date: Date!
}

type TravelSchedule {
    legs: [TravelScheduleLeg!]!
    origin: Stop!
    destination: Stop!
    duration: Int! 
    departure: DateTime! # origin departure time
    arrival: DateTime! # destination arrival
}

type TravelScheduleLeg {
    origin: Stop!
    destination: Stop!
    walk: Boolean!
    distance: Float!
    transit: Transit            # if null then walking
    duration: Int!
    departure: DateTime!
    arrival: DateTime!
}

# Transit taken by a scheduled leg
type Transit {
    route: Route!
    trip: Trip!
    departure: StopTime!
    arrival: StopTime!
}

input TravelLegInput {
    origin: ID!
    destination: ID!
    route: ID # if the route id is null then walk
}

input TravelScheduleOptions {
    datetime: DateTime # default is the current time
    mode: ScheduleMode!
}

type TravelPayload {
    schedule: TravelSchedule
    errors: [UserError!]!
}

type StopSearchPayload {
    page: PageInfo!
    results: [Stop!]!
}

input LocationInput {
    latitude: Float!
    longitude: Float!
}

type Query {
    # lookup by id
    stop(id: ID!): Stop
    stopRoute(stop: ID!, route: ID!): StopRoute

    # search
    searchStopText(text: String!, page: PageInput!): StopSearchPayload! 
    searchStopLocation(location: LocationInput!, radius: Float!, page: PageInput!): StopSearchPayload! 
    
    # travel planner that creates a route and schedule
    travelPlanner(origin: ID!, destination: ID!, options: TravelScheduleOptions!): TravelPayload!

    # travel planner that creates a schedule from a route
    travelPlannerFixedRoute(input: [TravelLegInput!]!, options: TravelScheduleOptions!): TravelPayload!
}

type UserError {
    field: String!
    message: String!
}

type PageInfo {
    cursor: Int!   # how many to skip next time
    remaining: Int!
}

input PageInput {
    skip: Int!
    limit: Int! # use a negative number to disable the limit
}
