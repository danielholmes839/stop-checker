# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - schema.graphql

# Where should the generated server code go?
exec:
  filename: application/schema/schema.go
  package: schema

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: application/schema/sdl.go
  package: schema

# Where should the resolver implementations go?
# resolver:
#   layout: follow-schema
#   dir: application/codegen/graph
#   package: graph

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
omit_slice_element_pointers: true

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
resolvers_always_return_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking

models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Bus:
    model: "stop-checker.com/db/model.Bus"
  Location:
    model: "stop-checker.com/db/model.Location"
  LocationInput:
    model: "stop-checker.com/db/model.Location"
  Path:
    model: "stop-checker.com/db/model.Path"
  Stop:
    model: "stop-checker.com/db/model.Stop"
  StopTime:
    model: "stop-checker.com/db/model.StopTime"
  ScheduleResult:
    model: "stop-checker.com/db/model.ScheduleResult"
  StopRoute:
    model: "stop-checker.com/db/model.StopRoute"
  Schedule:
    model: "stop-checker.com/db/repository.Schedule"
  StopLocationResult:
    model: "stop-checker.com/db.StopLocationResult"
  StopTextResult:
    model: "stop-checker.com/db.StopTextResult"
  Route:
    model: "stop-checker.com/db/model.Route"
  Trip:
    model: "stop-checker.com/db/model.Trip"
  Service:
    model: "stop-checker.com/db/model.Service"
  ServiceException:
    model: "stop-checker.com/db/model.ServiceException"
  TravelSchedule:
    model: "stop-checker.com/db/model.TravelSchedule"
  TravelScheduleLeg:
    model: "stop-checker.com/db/model.TravelScheduleLeg"
  TravelScheduleNode:
    model: "stop-checker.com/db/model.TravelScheduleNode"
  Transit:
    model: "stop-checker.com/db/model.Transit"
  TravelPlanInput:
    model: "stop-checker.com/db/model.TravelPlan"
  TravelPlanLegInput:
    model: "stop-checker.com/db/model.TravelPlanLeg"
  Date:
    model: "stop-checker.com/application/resolvers/scalars.Date"
  Datetime:
    model: "stop-checker.com/application/resolvers/scalars.DateTime"
  Time:
    model: "stop-checker.com/application/resolvers/scalars.Time"